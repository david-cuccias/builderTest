"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/** @jsx jsx */
var core_1 = require("@emotion/core");
var react_1 = __importDefault(require("react"));
var builder_block_component_1 = require("../components/builder-block.component");
var with_builder_1 = require("../functions/with-builder");
var SectionComponent = /** @class */ (function (_super) {
    __extends(SectionComponent, _super);
    function SectionComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SectionComponent.prototype.render = function () {
        return (core_1.jsx("div", { css: {
                width: '100%',
                // height: '100%' was is here so the inner contents can align center, but that is causing
                // issues in Safari. Need another workaround.
                alignSelf: 'stretch',
                flexGrow: 1,
                boxSizing: 'border-box',
                maxWidth: this.props.maxWidth,
                display: 'flex',
                flexDirection: 'column',
                alignItems: 'stretch',
                marginLeft: 'auto',
                marginRight: 'auto',
            } }, this.props.builderBlock &&
            this.props.builderBlock.children &&
            this.props.builderBlock.children.map(function (block, index) { return (core_1.jsx(builder_block_component_1.BuilderBlock, { key: block.id, block: block })); })));
    };
    return SectionComponent;
}(react_1.default.Component));
exports.Section = with_builder_1.withBuilder(SectionComponent, {
    name: 'Core:Section',
    static: true,
    image: 'https://cdn.builder.io/api/v1/image/assets%2FIsxPKMo2gPRRKeakUztj1D6uqed2%2F682efef23ace49afac61748dd305c70a',
    inputs: [
        {
            name: 'maxWidth',
            type: 'number',
            defaultValue: 1200,
        },
    ],
    defaultStyles: {
        paddingLeft: '20px',
        paddingRight: '20px',
        paddingTop: '50px',
        paddingBottom: '50px',
        marginTop: '0px',
        width: '100vw',
        marginLeft: 'calc(50% - 50vw)',
    },
    canHaveChildren: true,
    // TODO: defaults that deep merge and can be anyting - responsive styles, etc
    defaultChildren: [
        {
            '@type': '@builder.io/sdk:Element',
            responsiveStyles: {
                large: {
                    textAlign: 'center',
                },
            },
            component: {
                name: 'Text',
                options: {
                    text: "<p><b>I am a section! My content keeps from getting too wide, so that it's easy to read even on big screens.</b></p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur</p>",
                },
            },
        },
    ],
});
//# sourceMappingURL=Section.js.map